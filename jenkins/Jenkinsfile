pipeline {
    agent any
    tools {
        maven 'maven'
    }
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '35', daysToKeepStr: '60', artifactNumToKeepStr: '35')) // avoid storage flood keep up to 35 builds for each branch
    }
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'refPush', value: '$.changes[0].ref.id'],
                [key: 'mailTo', value: '$.actor.emailAddress']
            ],

            causeString: 'Triggered on branch: ' + BRANCH_NAME,
            token: "simple-java-maven", //webhook token
            //DEBUG Triggers options:
            // printContributedVariables: true,
            // printPostContent: true,
            // silentResponse: false,
            regexpFilterText: '$refPush',
            regexpFilterExpression: '^refs/heads/' + BRANCH_NAME + '$' // Run only for the triggered branch
        )
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    env.FAILED_STAGE = env.STAGE_NAME
                    echo " ${env.STAGE_NAME} Stage ".center(61, '=')
                    echo "Checking out the repository..."
                    checkout scm
                }
            }
        }
        stage('Build') { 
            steps {
                script {
                    env.FAILED_STAGE = env.STAGE_NAME
                    echo " ${env.STAGE_NAME} Stage ".center(61, '=')
                    echo "Building the app using maven..."
                    echo "${env.BRANCH_NAME}"
                    sh 'mvn -B -DskipTests clean package'
                }
            }
        }
        stage('Test') {
            when { anyOf {
                expression { BRANCH_NAME == 'origin/master' }
                expression { env.BRANCH_NAME ==~ 'QA/*' }
            } }
            steps {
                script {
                    env.FAILED_STAGE = env.STAGE_NAME
                    echo " ${env.STAGE_NAME} Stage ".center(61, '=')
                    echo "Testing the app using maven..."
                    sh 'mvn test'
                }
            }
        }
    }
    post{
        success{
            echo "========Pipeline executed successfully ========"
        }

        failure{
            echo "========Pipeline execution failed========"
            echo " Failed in ${env.FAILED_STAGE} stage ".center(61, "_")
        }
    }
}
